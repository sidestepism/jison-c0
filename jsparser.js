/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jsparser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"fun_defs":4,"EOF":5,"fun_def":6,"type_expression":7,"ID":8,"(":9,")":10,"compound_statement":11,"params":12,"param":13,",":14,"statement":15,";":16,"continue":17,"break":18,"return":19,"expr":20,"if_statement":21,"while_statement":22,"statements":23,"{":24,"var_decls":25,"}":26,"var_decl":27,"int":28,"float":29,"if":30,"elseifs":31,"else":32,"elseif":33,"while":34,"eq_expr":35,"=":36,"rel_expr":37,"eq_opr":38,"==":39,"!=":40,"add_expr":41,"rel_opr":42,"<":43,">":44,"<=":45,">=":46,"mul_expr":47,"add_opr":48,"+":49,"-":50,"unary_expr":51,"mul_opr":52,"*":53,"/":54,"%":55,"NUMBER":56,"argument_expression_list":57,"unary_opr":58,"!":59,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ID",9:"(",10:")",14:",",16:";",17:"continue",18:"break",19:"return",24:"{",26:"}",28:"int",29:"float",30:"if",32:"else",33:"elseif",34:"while",36:"=",39:"==",40:"!=",43:"<",44:">",45:"<=",46:">=",49:"+",50:"-",53:"*",54:"/",55:"%",56:"NUMBER",59:"!"},
productions_: [0,[3,2],[4,0],[4,2],[6,5],[6,6],[12,1],[12,3],[13,2],[15,1],[15,2],[15,2],[15,3],[15,1],[15,1],[15,1],[15,2],[23,0],[23,2],[11,4],[25,0],[25,2],[27,3],[7,1],[7,1],[21,8],[31,0],[31,6],[22,5],[20,3],[20,1],[35,3],[35,1],[38,1],[38,1],[37,3],[37,1],[42,1],[42,1],[42,1],[42,1],[41,3],[41,1],[48,1],[48,1],[47,3],[47,1],[52,1],[52,1],[52,1],[51,1],[51,3],[51,1],[51,3],[51,4],[51,2],[58,1],[58,1],[58,1],[57,1],[57,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4:this.$ = new Fundef($$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1])
break;
case 5:this.$ = new Fundef($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2])
break;
}
},
table: [{3:1,4:2,5:[2,2],6:3,7:4,28:[1,5],29:[1,6]},{1:[3]},{5:[1,7]},{4:8,5:[2,2],6:3,7:4,28:[1,5],29:[1,6]},{8:[1,9]},{8:[2,23]},{8:[2,24]},{1:[2,1]},{5:[2,3]},{9:[1,10]},{7:14,10:[1,11],12:12,13:13,28:[1,5],29:[1,6]},{11:15,24:[1,16]},{10:[1,17],14:[1,18]},{10:[2,6],14:[2,6]},{8:[1,19]},{5:[2,4],28:[2,4],29:[2,4]},{7:22,8:[2,20],9:[2,20],16:[2,20],17:[2,20],18:[2,20],19:[2,20],24:[2,20],25:20,26:[2,20],27:21,28:[1,5],29:[1,6],30:[2,20],34:[2,20],49:[2,20],50:[2,20],56:[2,20],59:[2,20]},{11:23,24:[1,16]},{7:14,13:24,28:[1,5],29:[1,6]},{10:[2,8],14:[2,8]},{8:[1,44],9:[1,43],11:31,15:26,16:[1,27],17:[1,28],18:[1,29],19:[1,30],20:34,21:32,22:33,23:25,24:[1,16],26:[2,17],30:[1,35],34:[1,36],35:37,37:38,41:39,47:40,49:[1,46],50:[1,47],51:41,56:[1,42],58:45,59:[1,48]},{7:22,8:[2,20],9:[2,20],16:[2,20],17:[2,20],18:[2,20],19:[2,20],24:[2,20],25:49,26:[2,20],27:21,28:[1,5],29:[1,6],30:[2,20],34:[2,20],49:[2,20],50:[2,20],56:[2,20],59:[2,20]},{8:[1,50]},{5:[2,5],28:[2,5],29:[2,5]},{10:[2,7],14:[2,7]},{26:[1,51]},{8:[1,44],9:[1,43],11:31,15:26,16:[1,27],17:[1,28],18:[1,29],19:[1,30],20:34,21:32,22:33,23:52,24:[1,16],26:[2,17],30:[1,35],34:[1,36],35:37,37:38,41:39,47:40,49:[1,46],50:[1,47],51:41,56:[1,42],58:45,59:[1,48]},{8:[2,9],9:[2,9],16:[2,9],17:[2,9],18:[2,9],19:[2,9],24:[2,9],26:[2,9],30:[2,9],32:[2,9],33:[2,9],34:[2,9],49:[2,9],50:[2,9],56:[2,9],59:[2,9]},{16:[1,53]},{16:[1,54]},{8:[1,44],9:[1,43],20:55,35:37,37:38,41:39,47:40,49:[1,46],50:[1,47],51:41,56:[1,42],58:45,59:[1,48]},{8:[2,13],9:[2,13],16:[2,13],17:[2,13],18:[2,13],19:[2,13],24:[2,13],26:[2,13],30:[2,13],32:[2,13],33:[2,13],34:[2,13],49:[2,13],50:[2,13],56:[2,13],59:[2,13]},{8:[2,14],9:[2,14],16:[2,14],17:[2,14],18:[2,14],19:[2,14],24:[2,14],26:[2,14],30:[2,14],32:[2,14],33:[2,14],34:[2,14],49:[2,14],50:[2,14],56:[2,14],59:[2,14]},{8:[2,15],9:[2,15],16:[2,15],17:[2,15],18:[2,15],19:[2,15],24:[2,15],26:[2,15],30:[2,15],32:[2,15],33:[2,15],34:[2,15],49:[2,15],50:[2,15],56:[2,15],59:[2,15]},{16:[1,56]},{9:[1,57]},{9:[1,58]},{10:[2,30],14:[2,30],16:[2,30],36:[1,59]},{10:[2,32],14:[2,32],16:[2,32],36:[2,32],38:60,39:[1,61],40:[1,62]},{10:[2,36],14:[2,36],16:[2,36],36:[2,36],39:[2,36],40:[2,36],42:63,43:[1,64],44:[1,65],45:[1,66],46:[1,67]},{10:[2,42],14:[2,42],16:[2,42],36:[2,42],39:[2,42],40:[2,42],43:[2,42],44:[2,42],45:[2,42],46:[2,42],48:68,49:[1,69],50:[1,70]},{10:[2,46],14:[2,46],16:[2,46],36:[2,46],39:[2,46],40:[2,46],43:[2,46],44:[2,46],45:[2,46],46:[2,46],49:[2,46],50:[2,46],52:71,53:[1,72],54:[1,73],55:[1,74]},{10:[2,50],14:[2,50],16:[2,50],36:[2,50],39:[2,50],40:[2,50],43:[2,50],44:[2,50],45:[2,50],46:[2,50],49:[2,50],50:[2,50],53:[2,50],54:[2,50],55:[2,50]},{8:[1,44],9:[1,43],20:75,35:37,37:38,41:39,47:40,49:[1,46],50:[1,47],51:41,56:[1,42],58:45,59:[1,48]},{9:[1,76],10:[2,52],14:[2,52],16:[2,52],36:[2,52],39:[2,52],40:[2,52],43:[2,52],44:[2,52],45:[2,52],46:[2,52],49:[2,52],50:[2,52],53:[2,52],54:[2,52],55:[2,52]},{8:[1,44],9:[1,43],49:[1,46],50:[1,47],51:77,56:[1,42],58:45,59:[1,48]},{8:[2,56],9:[2,56],49:[2,56],50:[2,56],56:[2,56],59:[2,56]},{8:[2,57],9:[2,57],49:[2,57],50:[2,57],56:[2,57],59:[2,57]},{8:[2,58],9:[2,58],49:[2,58],50:[2,58],56:[2,58],59:[2,58]},{8:[2,21],9:[2,21],16:[2,21],17:[2,21],18:[2,21],19:[2,21],24:[2,21],26:[2,21],30:[2,21],34:[2,21],49:[2,21],50:[2,21],56:[2,21],59:[2,21]},{16:[1,78]},{5:[2,19],8:[2,19],9:[2,19],16:[2,19],17:[2,19],18:[2,19],19:[2,19],24:[2,19],26:[2,19],28:[2,19],29:[2,19],30:[2,19],32:[2,19],33:[2,19],34:[2,19],49:[2,19],50:[2,19],56:[2,19],59:[2,19]},{26:[2,18]},{8:[2,10],9:[2,10],16:[2,10],17:[2,10],18:[2,10],19:[2,10],24:[2,10],26:[2,10],30:[2,10],32:[2,10],33:[2,10],34:[2,10],49:[2,10],50:[2,10],56:[2,10],59:[2,10]},{8:[2,11],9:[2,11],16:[2,11],17:[2,11],18:[2,11],19:[2,11],24:[2,11],26:[2,11],30:[2,11],32:[2,11],33:[2,11],34:[2,11],49:[2,11],50:[2,11],56:[2,11],59:[2,11]},{16:[1,79]},{8:[2,16],9:[2,16],16:[2,16],17:[2,16],18:[2,16],19:[2,16],24:[2,16],26:[2,16],30:[2,16],32:[2,16],33:[2,16],34:[2,16],49:[2,16],50:[2,16],56:[2,16],59:[2,16]},{8:[1,44],9:[1,43],20:80,35:37,37:38,41:39,47:40,49:[1,46],50:[1,47],51:41,56:[1,42],58:45,59:[1,48]},{8:[1,44],9:[1,43],20:81,35:37,37:38,41:39,47:40,49:[1,46],50:[1,47],51:41,56:[1,42],58:45,59:[1,48]},{8:[1,44],9:[1,43],20:82,35:37,37:38,41:39,47:40,49:[1,46],50:[1,47],51:41,56:[1,42],58:45,59:[1,48]},{8:[1,44],9:[1,43],35:83,37:38,41:39,47:40,49:[1,46],50:[1,47],51:41,56:[1,42],58:45,59:[1,48]},{8:[2,33],9:[2,33],49:[2,33],50:[2,33],56:[2,33],59:[2,33]},{8:[2,34],9:[2,34],49:[2,34],50:[2,34],56:[2,34],59:[2,34]},{8:[1,44],9:[1,43],37:84,41:39,47:40,49:[1,46],50:[1,47],51:41,56:[1,42],58:45,59:[1,48]},{8:[2,37],9:[2,37],49:[2,37],50:[2,37],56:[2,37],59:[2,37]},{8:[2,38],9:[2,38],49:[2,38],50:[2,38],56:[2,38],59:[2,38]},{8:[2,39],9:[2,39],49:[2,39],50:[2,39],56:[2,39],59:[2,39]},{8:[2,40],9:[2,40],49:[2,40],50:[2,40],56:[2,40],59:[2,40]},{8:[1,44],9:[1,43],41:85,47:40,49:[1,46],50:[1,47],51:41,56:[1,42],58:45,59:[1,48]},{8:[2,43],9:[2,43],49:[2,43],50:[2,43],56:[2,43],59:[2,43]},{8:[2,44],9:[2,44],49:[2,44],50:[2,44],56:[2,44],59:[2,44]},{8:[1,44],9:[1,43],47:86,49:[1,46],50:[1,47],51:41,56:[1,42],58:45,59:[1,48]},{8:[2,47],9:[2,47],49:[2,47],50:[2,47],56:[2,47],59:[2,47]},{8:[2,48],9:[2,48],49:[2,48],50:[2,48],56:[2,48],59:[2,48]},{8:[2,49],9:[2,49],49:[2,49],50:[2,49],56:[2,49],59:[2,49]},{10:[1,87]},{8:[1,44],9:[1,43],10:[1,88],20:90,35:37,37:38,41:39,47:40,49:[1,46],50:[1,47],51:41,56:[1,42],57:89,58:45,59:[1,48]},{10:[2,55],14:[2,55],16:[2,55],36:[2,55],39:[2,55],40:[2,55],43:[2,55],44:[2,55],45:[2,55],46:[2,55],49:[2,55],50:[2,55],53:[2,55],54:[2,55],55:[2,55]},{8:[2,22],9:[2,22],16:[2,22],17:[2,22],18:[2,22],19:[2,22],24:[2,22],26:[2,22],28:[2,22],29:[2,22],30:[2,22],34:[2,22],49:[2,22],50:[2,22],56:[2,22],59:[2,22]},{8:[2,12],9:[2,12],16:[2,12],17:[2,12],18:[2,12],19:[2,12],24:[2,12],26:[2,12],30:[2,12],32:[2,12],33:[2,12],34:[2,12],49:[2,12],50:[2,12],56:[2,12],59:[2,12]},{10:[1,91]},{10:[1,92]},{10:[2,29],14:[2,29],16:[2,29]},{10:[2,31],14:[2,31],16:[2,31],36:[2,31]},{10:[2,35],14:[2,35],16:[2,35],36:[2,35],39:[2,35],40:[2,35]},{10:[2,41],14:[2,41],16:[2,41],36:[2,41],39:[2,41],40:[2,41],43:[2,41],44:[2,41],45:[2,41],46:[2,41]},{10:[2,45],14:[2,45],16:[2,45],36:[2,45],39:[2,45],40:[2,45],43:[2,45],44:[2,45],45:[2,45],46:[2,45],49:[2,45],50:[2,45]},{10:[2,51],14:[2,51],16:[2,51],36:[2,51],39:[2,51],40:[2,51],43:[2,51],44:[2,51],45:[2,51],46:[2,51],49:[2,51],50:[2,51],53:[2,51],54:[2,51],55:[2,51]},{10:[2,53],14:[2,53],16:[2,53],36:[2,53],39:[2,53],40:[2,53],43:[2,53],44:[2,53],45:[2,53],46:[2,53],49:[2,53],50:[2,53],53:[2,53],54:[2,53],55:[2,53]},{10:[1,93]},{10:[2,59],14:[1,94]},{8:[1,44],9:[1,43],11:31,15:95,16:[1,27],17:[1,28],18:[1,29],19:[1,30],20:34,21:32,22:33,24:[1,16],30:[1,35],34:[1,36],35:37,37:38,41:39,47:40,49:[1,46],50:[1,47],51:41,56:[1,42],58:45,59:[1,48]},{8:[1,44],9:[1,43],11:31,15:96,16:[1,27],17:[1,28],18:[1,29],19:[1,30],20:34,21:32,22:33,24:[1,16],30:[1,35],34:[1,36],35:37,37:38,41:39,47:40,49:[1,46],50:[1,47],51:41,56:[1,42],58:45,59:[1,48]},{10:[2,54],14:[2,54],16:[2,54],36:[2,54],39:[2,54],40:[2,54],43:[2,54],44:[2,54],45:[2,54],46:[2,54],49:[2,54],50:[2,54],53:[2,54],54:[2,54],55:[2,54]},{8:[1,44],9:[1,43],20:90,35:37,37:38,41:39,47:40,49:[1,46],50:[1,47],51:41,56:[1,42],57:97,58:45,59:[1,48]},{31:98,32:[2,26],33:[1,99]},{8:[2,28],9:[2,28],16:[2,28],17:[2,28],18:[2,28],19:[2,28],24:[2,28],26:[2,28],30:[2,28],32:[2,28],33:[2,28],34:[2,28],49:[2,28],50:[2,28],56:[2,28],59:[2,28]},{10:[2,60]},{32:[1,100]},{9:[1,101]},{8:[1,44],9:[1,43],11:31,15:102,16:[1,27],17:[1,28],18:[1,29],19:[1,30],20:34,21:32,22:33,24:[1,16],30:[1,35],34:[1,36],35:37,37:38,41:39,47:40,49:[1,46],50:[1,47],51:41,56:[1,42],58:45,59:[1,48]},{8:[1,44],9:[1,43],20:103,35:37,37:38,41:39,47:40,49:[1,46],50:[1,47],51:41,56:[1,42],58:45,59:[1,48]},{8:[2,25],9:[2,25],16:[2,25],17:[2,25],18:[2,25],19:[2,25],24:[2,25],26:[2,25],30:[2,25],32:[2,25],33:[2,25],34:[2,25],49:[2,25],50:[2,25],56:[2,25],59:[2,25]},{10:[1,104]},{8:[1,44],9:[1,43],11:31,15:105,16:[1,27],17:[1,28],18:[1,29],19:[1,30],20:34,21:32,22:33,24:[1,16],30:[1,35],34:[1,36],35:37,37:38,41:39,47:40,49:[1,46],50:[1,47],51:41,56:[1,42],58:45,59:[1,48]},{31:106,32:[2,26],33:[1,99]},{32:[2,27]}],
defaultActions: {5:[2,23],6:[2,24],7:[2,1],8:[2,3],52:[2,18],97:[2,60],106:[2,27]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 28
break;
case 2:return 29
break;
case 3:return 17
break;
case 4:return 19
break;
case 5:return 30
break;
case 6:return 32
break;
case 7:return 33
break;
case 8:return 34
break;
case 9:return 'for'
break;
case 10:return 18
break;
case 11:return 17
break;
case 12:return 8
break;
case 13:return 56
break;
case 14:return 14
break;
case 15:return 53
break;
case 16:return 39
break;
case 17:return 40
break;
case 18:return 46
break;
case 19:return 45
break;
case 20:return 36
break;
case 21:return 44
break;
case 22:return 43
break;
case 23:return 54
break;
case 24:return 50
break;
case 25:return 49
break;
case 26:return '^'
break;
case 27:return 59
break;
case 28:return 55
break;
case 29:return 9
break;
case 30:return 10
break;
case 31:return 24
break;
case 32:return 26
break;
case 33:return 16
break;
case 34:return 'PI'
break;
case 35:return 'E'
break;
case 36:return 5
break;
case 37:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:elsif\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:[a-zA-Z_][0-9a-zA-Z_]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:,)/,/^(?:\*)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?:>)/,/^(?:<)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jsparser;
exports.Parser = jsparser.Parser;
exports.parse = function () { return jsparser.parse.apply(jsparser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}