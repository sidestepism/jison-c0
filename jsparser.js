/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jsparser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"fun_defs":4,"EOF":5,"fun_def":6,"type_expression":7,"ID":8,"(":9,")":10,"compound_statement":11,"params":12,"という関数":13,"「":14,"」":15,"を定義する":16,"を定義して、":17,"param":18,",":19,"statement":20,";":21,"continue":22,"break":23,"return":24,"expr":25,"を返す":26,"if_statement":27,"while_statement":28,"して、":29,"する":30,"statements":31,"{":32,"var_decls":33,"}":34,"を引数に取り":35,"var_decl":36,"int":37,"float":38,"整数":39,"実数":40,"if":41,"elseifs":42,"else":43,"elseif":44,"while":45,"eq_expr":46,"=":47,"を":48,"に代入":49,"rel_expr":50,"eq_opr":51,"==":52,"!=":53,"add_expr":54,"rel_opr":55,"<":56,">":57,"<=":58,">=":59,"mul_expr":60,"add_opr":61,"+":62,"-":63,"unary_expr":64,"mul_opr":65,"*":66,"/":67,"%":68,"NUMBER":69,"argument_expression_list":70,"unary_opr":71,"!":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ID",9:"(",10:")",13:"という関数",14:"「",15:"」",16:"を定義する",17:"を定義して、",19:",",21:";",22:"continue",23:"break",24:"return",26:"を返す",29:"して、",30:"する",32:"{",34:"}",35:"を引数に取り",37:"int",38:"float",39:"整数",40:"実数",41:"if",43:"else",44:"elseif",45:"while",47:"=",48:"を",49:"に代入",52:"==",53:"!=",56:"<",57:">",58:"<=",59:">=",62:"+",63:"-",66:"*",67:"/",68:"%",69:"NUMBER",72:"!"},
productions_: [0,[3,2],[4,0],[4,2],[6,5],[6,6],[6,6],[6,7],[12,1],[12,3],[18,2],[20,1],[20,2],[20,2],[20,3],[20,2],[20,1],[20,1],[20,1],[20,2],[20,2],[20,2],[31,0],[31,2],[31,3],[11,4],[11,6],[11,4],[33,0],[33,2],[36,3],[7,1],[7,1],[7,1],[7,1],[27,8],[42,0],[42,6],[28,5],[25,3],[25,4],[25,1],[46,3],[46,1],[51,1],[51,1],[50,3],[50,1],[55,1],[55,1],[55,1],[55,1],[54,3],[54,1],[61,1],[61,1],[60,3],[60,1],[65,1],[65,1],[65,1],[64,1],[64,3],[64,1],[64,3],[64,4],[64,2],[71,1],[71,1],[71,1],[70,1],[70,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4:this.$ = new Fundef($$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1])
break;
case 5:this.$ = new Fundef($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2])
break;
}
},
table: [{3:1,4:2,5:[2,2],6:3,7:4,11:5,14:[1,11],32:[1,10],37:[1,6],38:[1,7],39:[1,8],40:[1,9]},{1:[3]},{5:[1,12]},{4:13,5:[2,2],6:3,7:4,11:5,14:[1,11],32:[1,10],37:[1,6],38:[1,7],39:[1,8],40:[1,9]},{8:[1,14]},{13:[1,15]},{8:[2,31]},{8:[2,32]},{8:[2,33]},{8:[2,34]},{7:18,8:[2,28],9:[2,28],14:[2,28],21:[2,28],22:[2,28],23:[2,28],24:[2,28],32:[2,28],33:16,34:[2,28],36:17,37:[1,6],38:[1,7],39:[1,8],40:[1,9],41:[2,28],45:[2,28],62:[2,28],63:[2,28],69:[2,28],72:[2,28]},{7:22,8:[2,28],9:[2,28],12:19,14:[2,28],15:[2,28],18:21,21:[2,28],22:[2,28],23:[2,28],24:[2,28],32:[2,28],33:20,36:17,37:[1,6],38:[1,7],39:[1,8],40:[1,9],41:[2,28],45:[2,28],62:[2,28],63:[2,28],69:[2,28],72:[2,28]},{1:[2,1]},{5:[2,3]},{9:[1,23]},{14:[1,24]},{8:[1,44],9:[1,43],11:32,14:[1,11],20:26,21:[1,27],22:[1,28],23:[1,29],24:[1,30],25:31,27:33,28:34,31:25,32:[1,10],34:[2,22],41:[1,36],45:[1,37],46:35,50:38,54:39,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],71:45,72:[1,48]},{7:18,8:[2,28],9:[2,28],14:[2,28],15:[2,28],21:[2,28],22:[2,28],23:[2,28],24:[2,28],32:[2,28],33:49,34:[2,28],36:17,37:[1,6],38:[1,7],39:[1,8],40:[1,9],41:[2,28],45:[2,28],62:[2,28],63:[2,28],69:[2,28],72:[2,28]},{8:[1,50]},{19:[1,52],35:[1,51]},{8:[1,44],9:[1,43],11:32,14:[1,11],15:[2,22],20:26,21:[1,27],22:[1,28],23:[1,29],24:[1,30],25:31,27:33,28:34,31:53,32:[1,10],41:[1,36],45:[1,37],46:35,50:38,54:39,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],71:45,72:[1,48]},{10:[2,8],19:[2,8],35:[2,8]},{8:[1,54]},{7:57,10:[1,55],12:56,18:21,37:[1,6],38:[1,7],39:[1,8],40:[1,9]},{8:[1,58]},{34:[1,59]},{8:[1,44],9:[1,43],11:32,14:[1,11],15:[2,22],20:26,21:[1,27],22:[1,28],23:[1,29],24:[1,30],25:31,27:33,28:34,29:[1,61],31:60,32:[1,10],34:[2,22],41:[1,36],45:[1,37],46:35,50:38,54:39,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],71:45,72:[1,48]},{8:[2,11],9:[2,11],14:[2,11],15:[2,11],21:[2,11],22:[2,11],23:[2,11],24:[2,11],29:[2,11],32:[2,11],34:[2,11],41:[2,11],43:[2,11],44:[2,11],45:[2,11],62:[2,11],63:[2,11],69:[2,11],72:[2,11]},{21:[1,62]},{21:[1,63]},{8:[1,44],9:[1,43],25:64,46:35,50:38,54:39,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],71:45,72:[1,48]},{21:[1,66],26:[1,65],29:[1,67],30:[1,68]},{8:[2,16],9:[2,16],14:[2,16],15:[2,16],21:[2,16],22:[2,16],23:[2,16],24:[2,16],29:[2,16],32:[2,16],34:[2,16],41:[2,16],43:[2,16],44:[2,16],45:[2,16],62:[2,16],63:[2,16],69:[2,16],72:[2,16]},{8:[2,17],9:[2,17],14:[2,17],15:[2,17],21:[2,17],22:[2,17],23:[2,17],24:[2,17],29:[2,17],32:[2,17],34:[2,17],41:[2,17],43:[2,17],44:[2,17],45:[2,17],62:[2,17],63:[2,17],69:[2,17],72:[2,17]},{8:[2,18],9:[2,18],14:[2,18],15:[2,18],21:[2,18],22:[2,18],23:[2,18],24:[2,18],29:[2,18],32:[2,18],34:[2,18],41:[2,18],43:[2,18],44:[2,18],45:[2,18],62:[2,18],63:[2,18],69:[2,18],72:[2,18]},{10:[2,41],19:[2,41],21:[2,41],26:[2,41],29:[2,41],30:[2,41],47:[1,69],48:[1,70],49:[2,41]},{9:[1,71]},{9:[1,72]},{10:[2,43],19:[2,43],21:[2,43],26:[2,43],29:[2,43],30:[2,43],47:[2,43],48:[2,43],49:[2,43],51:73,52:[1,74],53:[1,75]},{10:[2,47],19:[2,47],21:[2,47],26:[2,47],29:[2,47],30:[2,47],47:[2,47],48:[2,47],49:[2,47],52:[2,47],53:[2,47],55:76,56:[1,77],57:[1,78],58:[1,79],59:[1,80]},{10:[2,53],19:[2,53],21:[2,53],26:[2,53],29:[2,53],30:[2,53],47:[2,53],48:[2,53],49:[2,53],52:[2,53],53:[2,53],56:[2,53],57:[2,53],58:[2,53],59:[2,53],61:81,62:[1,82],63:[1,83]},{10:[2,57],19:[2,57],21:[2,57],26:[2,57],29:[2,57],30:[2,57],47:[2,57],48:[2,57],49:[2,57],52:[2,57],53:[2,57],56:[2,57],57:[2,57],58:[2,57],59:[2,57],62:[2,57],63:[2,57],65:84,66:[1,85],67:[1,86],68:[1,87]},{10:[2,61],19:[2,61],21:[2,61],26:[2,61],29:[2,61],30:[2,61],47:[2,61],48:[2,61],49:[2,61],52:[2,61],53:[2,61],56:[2,61],57:[2,61],58:[2,61],59:[2,61],62:[2,61],63:[2,61],66:[2,61],67:[2,61],68:[2,61]},{8:[1,44],9:[1,43],25:88,46:35,50:38,54:39,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],71:45,72:[1,48]},{9:[1,89],10:[2,63],19:[2,63],21:[2,63],26:[2,63],29:[2,63],30:[2,63],47:[2,63],48:[2,63],49:[2,63],52:[2,63],53:[2,63],56:[2,63],57:[2,63],58:[2,63],59:[2,63],62:[2,63],63:[2,63],66:[2,63],67:[2,63],68:[2,63]},{8:[1,44],9:[1,43],62:[1,46],63:[1,47],64:90,69:[1,42],71:45,72:[1,48]},{8:[2,67],9:[2,67],62:[2,67],63:[2,67],69:[2,67],72:[2,67]},{8:[2,68],9:[2,68],62:[2,68],63:[2,68],69:[2,68],72:[2,68]},{8:[2,69],9:[2,69],62:[2,69],63:[2,69],69:[2,69],72:[2,69]},{8:[2,29],9:[2,29],14:[2,29],15:[2,29],21:[2,29],22:[2,29],23:[2,29],24:[2,29],32:[2,29],34:[2,29],41:[2,29],45:[2,29],62:[2,29],63:[2,29],69:[2,29],72:[2,29]},{21:[1,91]},{7:18,8:[2,28],9:[2,28],14:[2,28],15:[2,28],21:[2,28],22:[2,28],23:[2,28],24:[2,28],32:[2,28],33:92,36:17,37:[1,6],38:[1,7],39:[1,8],40:[1,9],41:[2,28],45:[2,28],62:[2,28],63:[2,28],69:[2,28],72:[2,28]},{7:57,18:93,37:[1,6],38:[1,7],39:[1,8],40:[1,9]},{15:[1,94]},{19:[2,10],21:[1,91],35:[2,10]},{11:95,14:[1,11],32:[1,10]},{10:[1,96],19:[1,52]},{8:[1,97]},{15:[1,98]},{5:[2,25],8:[2,25],9:[2,25],13:[2,25],14:[2,25],15:[2,25],21:[2,25],22:[2,25],23:[2,25],24:[2,25],29:[2,25],32:[2,25],34:[2,25],37:[2,25],38:[2,25],39:[2,25],40:[2,25],41:[2,25],43:[2,25],44:[2,25],45:[2,25],62:[2,25],63:[2,25],69:[2,25],72:[2,25]},{15:[2,23],34:[2,23]},{8:[1,44],9:[1,43],11:32,14:[1,11],15:[2,22],20:26,21:[1,27],22:[1,28],23:[1,29],24:[1,30],25:31,27:33,28:34,31:99,32:[1,10],34:[2,22],41:[1,36],45:[1,37],46:35,50:38,54:39,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],71:45,72:[1,48]},{8:[2,12],9:[2,12],14:[2,12],15:[2,12],21:[2,12],22:[2,12],23:[2,12],24:[2,12],29:[2,12],32:[2,12],34:[2,12],41:[2,12],43:[2,12],44:[2,12],45:[2,12],62:[2,12],63:[2,12],69:[2,12],72:[2,12]},{8:[2,13],9:[2,13],14:[2,13],15:[2,13],21:[2,13],22:[2,13],23:[2,13],24:[2,13],29:[2,13],32:[2,13],34:[2,13],41:[2,13],43:[2,13],44:[2,13],45:[2,13],62:[2,13],63:[2,13],69:[2,13],72:[2,13]},{21:[1,100]},{8:[2,15],9:[2,15],14:[2,15],15:[2,15],21:[2,15],22:[2,15],23:[2,15],24:[2,15],29:[2,15],32:[2,15],34:[2,15],41:[2,15],43:[2,15],44:[2,15],45:[2,15],62:[2,15],63:[2,15],69:[2,15],72:[2,15]},{8:[2,19],9:[2,19],14:[2,19],15:[2,19],21:[2,19],22:[2,19],23:[2,19],24:[2,19],29:[2,19],32:[2,19],34:[2,19],41:[2,19],43:[2,19],44:[2,19],45:[2,19],62:[2,19],63:[2,19],69:[2,19],72:[2,19]},{8:[2,20],9:[2,20],14:[2,20],15:[2,20],21:[2,20],22:[2,20],23:[2,20],24:[2,20],29:[2,20],32:[2,20],34:[2,20],41:[2,20],43:[2,20],44:[2,20],45:[2,20],62:[2,20],63:[2,20],69:[2,20],72:[2,20]},{8:[2,21],9:[2,21],14:[2,21],15:[2,21],21:[2,21],22:[2,21],23:[2,21],24:[2,21],29:[2,21],32:[2,21],34:[2,21],41:[2,21],43:[2,21],44:[2,21],45:[2,21],62:[2,21],63:[2,21],69:[2,21],72:[2,21]},{8:[1,44],9:[1,43],25:101,46:35,50:38,54:39,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],71:45,72:[1,48]},{8:[1,44],9:[1,43],25:102,46:35,50:38,54:39,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],71:45,72:[1,48]},{8:[1,44],9:[1,43],25:103,46:35,50:38,54:39,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],71:45,72:[1,48]},{8:[1,44],9:[1,43],25:104,46:35,50:38,54:39,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],71:45,72:[1,48]},{8:[1,44],9:[1,43],46:105,50:38,54:39,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],71:45,72:[1,48]},{8:[2,44],9:[2,44],62:[2,44],63:[2,44],69:[2,44],72:[2,44]},{8:[2,45],9:[2,45],62:[2,45],63:[2,45],69:[2,45],72:[2,45]},{8:[1,44],9:[1,43],50:106,54:39,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],71:45,72:[1,48]},{8:[2,48],9:[2,48],62:[2,48],63:[2,48],69:[2,48],72:[2,48]},{8:[2,49],9:[2,49],62:[2,49],63:[2,49],69:[2,49],72:[2,49]},{8:[2,50],9:[2,50],62:[2,50],63:[2,50],69:[2,50],72:[2,50]},{8:[2,51],9:[2,51],62:[2,51],63:[2,51],69:[2,51],72:[2,51]},{8:[1,44],9:[1,43],54:107,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],71:45,72:[1,48]},{8:[2,54],9:[2,54],62:[2,54],63:[2,54],69:[2,54],72:[2,54]},{8:[2,55],9:[2,55],62:[2,55],63:[2,55],69:[2,55],72:[2,55]},{8:[1,44],9:[1,43],60:108,62:[1,46],63:[1,47],64:41,69:[1,42],71:45,72:[1,48]},{8:[2,58],9:[2,58],62:[2,58],63:[2,58],69:[2,58],72:[2,58]},{8:[2,59],9:[2,59],62:[2,59],63:[2,59],69:[2,59],72:[2,59]},{8:[2,60],9:[2,60],62:[2,60],63:[2,60],69:[2,60],72:[2,60]},{10:[1,109]},{8:[1,44],9:[1,43],10:[1,110],25:112,46:35,50:38,54:39,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],70:111,71:45,72:[1,48]},{10:[2,66],19:[2,66],21:[2,66],26:[2,66],29:[2,66],30:[2,66],47:[2,66],48:[2,66],49:[2,66],52:[2,66],53:[2,66],56:[2,66],57:[2,66],58:[2,66],59:[2,66],62:[2,66],63:[2,66],66:[2,66],67:[2,66],68:[2,66]},{8:[2,30],9:[2,30],14:[2,30],15:[2,30],21:[2,30],22:[2,30],23:[2,30],24:[2,30],32:[2,30],34:[2,30],37:[2,30],38:[2,30],39:[2,30],40:[2,30],41:[2,30],45:[2,30],62:[2,30],63:[2,30],69:[2,30],72:[2,30]},{8:[1,44],9:[1,43],11:32,14:[1,11],15:[2,22],20:26,21:[1,27],22:[1,28],23:[1,29],24:[1,30],25:31,27:33,28:34,31:113,32:[1,10],41:[1,36],45:[1,37],46:35,50:38,54:39,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],71:45,72:[1,48]},{10:[2,9],19:[2,9],35:[2,9]},{5:[2,27],8:[2,27],9:[2,27],13:[2,27],14:[2,27],15:[2,27],21:[2,27],22:[2,27],23:[2,27],24:[2,27],29:[2,27],32:[2,27],34:[2,27],37:[2,27],38:[2,27],39:[2,27],40:[2,27],41:[2,27],43:[2,27],44:[2,27],45:[2,27],62:[2,27],63:[2,27],69:[2,27],72:[2,27]},{5:[2,4],14:[2,4],32:[2,4],37:[2,4],38:[2,4],39:[2,4],40:[2,4]},{11:114,14:[1,11],32:[1,10]},{10:[2,10],19:[2,10],35:[2,10]},{16:[1,115],17:[1,116]},{15:[2,24],34:[2,24]},{8:[2,14],9:[2,14],14:[2,14],15:[2,14],21:[2,14],22:[2,14],23:[2,14],24:[2,14],29:[2,14],32:[2,14],34:[2,14],41:[2,14],43:[2,14],44:[2,14],45:[2,14],62:[2,14],63:[2,14],69:[2,14],72:[2,14]},{10:[2,39],19:[2,39],21:[2,39],26:[2,39],29:[2,39],30:[2,39],49:[2,39]},{49:[1,117]},{10:[1,118]},{10:[1,119]},{10:[2,42],19:[2,42],21:[2,42],26:[2,42],29:[2,42],30:[2,42],47:[2,42],48:[2,42],49:[2,42]},{10:[2,46],19:[2,46],21:[2,46],26:[2,46],29:[2,46],30:[2,46],47:[2,46],48:[2,46],49:[2,46],52:[2,46],53:[2,46]},{10:[2,52],19:[2,52],21:[2,52],26:[2,52],29:[2,52],30:[2,52],47:[2,52],48:[2,52],49:[2,52],52:[2,52],53:[2,52],56:[2,52],57:[2,52],58:[2,52],59:[2,52]},{10:[2,56],19:[2,56],21:[2,56],26:[2,56],29:[2,56],30:[2,56],47:[2,56],48:[2,56],49:[2,56],52:[2,56],53:[2,56],56:[2,56],57:[2,56],58:[2,56],59:[2,56],62:[2,56],63:[2,56]},{10:[2,62],19:[2,62],21:[2,62],26:[2,62],29:[2,62],30:[2,62],47:[2,62],48:[2,62],49:[2,62],52:[2,62],53:[2,62],56:[2,62],57:[2,62],58:[2,62],59:[2,62],62:[2,62],63:[2,62],66:[2,62],67:[2,62],68:[2,62]},{10:[2,64],19:[2,64],21:[2,64],26:[2,64],29:[2,64],30:[2,64],47:[2,64],48:[2,64],49:[2,64],52:[2,64],53:[2,64],56:[2,64],57:[2,64],58:[2,64],59:[2,64],62:[2,64],63:[2,64],66:[2,64],67:[2,64],68:[2,64]},{10:[1,120]},{10:[2,70],19:[1,121]},{15:[1,122]},{5:[2,5],14:[2,5],32:[2,5],37:[2,5],38:[2,5],39:[2,5],40:[2,5]},{5:[2,6],14:[2,6],32:[2,6],37:[2,6],38:[2,6],39:[2,6],40:[2,6]},{6:123,7:4,11:5,14:[1,11],32:[1,10],37:[1,6],38:[1,7],39:[1,8],40:[1,9]},{10:[2,40],19:[2,40],21:[2,40],26:[2,40],29:[2,40],30:[2,40],49:[2,40]},{8:[1,44],9:[1,43],11:32,14:[1,11],20:124,21:[1,27],22:[1,28],23:[1,29],24:[1,30],25:31,27:33,28:34,32:[1,10],41:[1,36],45:[1,37],46:35,50:38,54:39,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],71:45,72:[1,48]},{8:[1,44],9:[1,43],11:32,14:[1,11],20:125,21:[1,27],22:[1,28],23:[1,29],24:[1,30],25:31,27:33,28:34,32:[1,10],41:[1,36],45:[1,37],46:35,50:38,54:39,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],71:45,72:[1,48]},{10:[2,65],19:[2,65],21:[2,65],26:[2,65],29:[2,65],30:[2,65],47:[2,65],48:[2,65],49:[2,65],52:[2,65],53:[2,65],56:[2,65],57:[2,65],58:[2,65],59:[2,65],62:[2,65],63:[2,65],66:[2,65],67:[2,65],68:[2,65]},{8:[1,44],9:[1,43],25:112,46:35,50:38,54:39,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],70:126,71:45,72:[1,48]},{5:[2,26],8:[2,26],9:[2,26],13:[2,26],14:[2,26],15:[2,26],21:[2,26],22:[2,26],23:[2,26],24:[2,26],29:[2,26],32:[2,26],34:[2,26],37:[2,26],38:[2,26],39:[2,26],40:[2,26],41:[2,26],43:[2,26],44:[2,26],45:[2,26],62:[2,26],63:[2,26],69:[2,26],72:[2,26]},{5:[2,7],14:[2,7],32:[2,7],37:[2,7],38:[2,7],39:[2,7],40:[2,7]},{42:127,43:[2,36],44:[1,128]},{8:[2,38],9:[2,38],14:[2,38],15:[2,38],21:[2,38],22:[2,38],23:[2,38],24:[2,38],29:[2,38],32:[2,38],34:[2,38],41:[2,38],43:[2,38],44:[2,38],45:[2,38],62:[2,38],63:[2,38],69:[2,38],72:[2,38]},{10:[2,71]},{43:[1,129]},{9:[1,130]},{8:[1,44],9:[1,43],11:32,14:[1,11],20:131,21:[1,27],22:[1,28],23:[1,29],24:[1,30],25:31,27:33,28:34,32:[1,10],41:[1,36],45:[1,37],46:35,50:38,54:39,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],71:45,72:[1,48]},{8:[1,44],9:[1,43],25:132,46:35,50:38,54:39,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],71:45,72:[1,48]},{8:[2,35],9:[2,35],14:[2,35],15:[2,35],21:[2,35],22:[2,35],23:[2,35],24:[2,35],29:[2,35],32:[2,35],34:[2,35],41:[2,35],43:[2,35],44:[2,35],45:[2,35],62:[2,35],63:[2,35],69:[2,35],72:[2,35]},{10:[1,133]},{8:[1,44],9:[1,43],11:32,14:[1,11],20:134,21:[1,27],22:[1,28],23:[1,29],24:[1,30],25:31,27:33,28:34,32:[1,10],41:[1,36],45:[1,37],46:35,50:38,54:39,60:40,62:[1,46],63:[1,47],64:41,69:[1,42],71:45,72:[1,48]},{42:135,43:[2,36],44:[1,128]},{43:[2,37]}],
defaultActions: {6:[2,31],7:[2,32],8:[2,33],9:[2,34],12:[2,1],13:[2,3],126:[2,71],135:[2,37]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return "「"
break;
case 2:return "」"
break;
case 3:return "という関数"
break;
case 4:return "を定義する"
break;
case 5:return "を定義して、"
break;
case 6:return "を引数に取り"
break;
case 7:return "を返す"
break;
case 8:return "に代入"
break;
case 9:return "して、"
break;
case 10:return "する"
break;
case 11:return "を"
break;
case 12:return 39
break;
case 13:return 37
break;
case 14:return 40
break;
case 15:return 38
break;
case 16:return 22
break;
case 17:return 24
break;
case 18:return 41
break;
case 19:return 43
break;
case 20:return 44
break;
case 21:return 45
break;
case 22:return 'for'
break;
case 23:return 23
break;
case 24:return 22
break;
case 25:return 8
break;
case 26:return 69
break;
case 27:return 19
break;
case 28:return 66
break;
case 29:return 52
break;
case 30:return 53
break;
case 31:return 59
break;
case 32:return 58
break;
case 33:return 47
break;
case 34:return 57
break;
case 35:return 56
break;
case 36:return 67
break;
case 37:return 63
break;
case 38:return 62
break;
case 39:return '^'
break;
case 40:return 72
break;
case 41:return 68
break;
case 42:return 9
break;
case 43:return 10
break;
case 44:return 32
break;
case 45:return 34
break;
case 46:return 21
break;
case 47:return 'PI'
break;
case 48:return 'E'
break;
case 49:return 5
break;
case 50:return 8
break;
}
},
rules: [/^(?:\s+)/,/^(?:「)/,/^(?:」)/,/^(?:という関数)/,/^(?:を定義する)/,/^(?:を定義して、)/,/^(?:を引数に取り)/,/^(?:を返す)/,/^(?:に代入)/,/^(?:して、)/,/^(?:する)/,/^(?:を)/,/^(?:整数)/,/^(?:int\b)/,/^(?:実数)/,/^(?:float\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:elsif\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:[a-zA-Z_][0-9a-zA-Z_]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:,)/,/^(?:\*)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?:>)/,/^(?:<)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:$)/,/^(?:[^\+\-\*\/\>\<\^\!\%\(\)\{\};「」a-zA-Z0-9]+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jsparser;
exports.Parser = jsparser.Parser;
exports.parse = function () { return jsparser.parse.apply(jsparser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}